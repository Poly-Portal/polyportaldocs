{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PolyPortal User Manual and Documentation Documentation for Developers Details on API design, database design, etc. Documentation for System Administrators Details on AWS configurations, hosting, etc. Documentation for Users Details on how to use Poly Portal to host 3D files.","title":"PolyPortal User Manual and Documentation"},{"location":"#polyportal-user-manual-and-documentation","text":"","title":"PolyPortal User Manual and Documentation"},{"location":"#documentation-for-developers","text":"Details on API design, database design, etc.","title":"Documentation for Developers"},{"location":"#documentation-for-system-administrators","text":"Details on AWS configurations, hosting, etc.","title":"Documentation for System Administrators"},{"location":"#documentation-for-users","text":"Details on how to use Poly Portal to host 3D files.","title":"Documentation for Users"},{"location":"administrators/","text":"","title":"Index"},{"location":"developers/","text":"Developer Documentation API Design Documentation on the REST style API underlying Poly Portal. Database Design Documentation on the table layout for the Poly Portal database.","title":"Developer Documentation"},{"location":"developers/#developer-documentation","text":"","title":"Developer Documentation"},{"location":"developers/#api-design","text":"Documentation on the REST style API underlying Poly Portal.","title":"API Design"},{"location":"developers/#database-design","text":"Documentation on the table layout for the Poly Portal database.","title":"Database Design"},{"location":"developers/api/","text":"API Documentation Poly Portal uses a REST style API to communicate between server and client. Outbound content (from the server to the client) is retrieved via GET request and inbound content (from the client to the server) is delivered via a POST request. There is additional complexity around file uploads. This is explained in the relevant sections. Overview GET Requests GET requests accept url parameters and returns JSON. Example URL parameter: www.abc.com/page?key1=value1&key2=value2 . A valid token must be provided in the HTTP Authorization header. POST Requests (Excluding File Upload) POST accepts JSON bodies as an input and will return JSON. The HTTP Content-type header must be set to application/json . A valid user token must be provided in the HTTP Authorization header. POST Request (File Upload Only) POST requests for file uploads must have the HTTP Content-type header set to multipart/form-data A special file upload token must be provided in the HTTP Authorization header. This token is unique to the file being uploaded. Important Terms and Nomenclature. Artwork Files : An artwork file is an individual file used in an artwork. Such files include meshes, textures, materials, and other supporting files.. Artworks : An artwork is a collection of one or more artwork files. One artwork may contain many artwork files. Artworks may also have many versions. HTTP Response Codes and Error Handling Generally, this API does not make use of HTTP response codes. In normal operation, the API will return a HTTP 200 code with a JSON response in the body, regardless of if the request was successful or not. Callers may check if a request was successful using the ok field in the attached JSON. On success the ok field will be set to true . On failure the ok field will be set to false and an error code and message will be included. An example of a successful response: { \"ok\":true ... other JSON data ... } An example of a failed response: { \"ok\":false, \"error\":\"accessDenied\", \"errorMessage\":\"Access to the specified resource is denied.\" } Tokens and The Authorization Header There are two types of tokens. To maintain security the tokens must be kept secret. Tokens are included plaintext in the authorization header using the bearer schema, ex: Authorization: Bearer <token> . User tokens. User tokens are issued to users when they log in and are used for most API features. The token uniquely identifies the user. File upload tokens . File upload tokens are issued when uploading a file. When a request is made using a file upload token the token is consumed and another must be generated. See artworkFile/create and artworkFile/upload for more information. File Uploads The image below gives an overview of the sequence to upload files to Poly Portal. Endpoints Type Endpoint Description GET artwork/list Get a list of artworks matching search parameters in a specified order. POST artwork/create Create a new artwork. POST artwork/update Create a new version of the artwork. POST artwork/remove Remove an artwork. POST artworkFile/create Inform the server of your intention to upload a artwork file. POST artworkFile/upload Upload a artwork file using the details from artworkFile/create . POST artworkFile/remove Delete a artwork file.","title":"API Documentation"},{"location":"developers/api/#api-documentation","text":"Poly Portal uses a REST style API to communicate between server and client. Outbound content (from the server to the client) is retrieved via GET request and inbound content (from the client to the server) is delivered via a POST request. There is additional complexity around file uploads. This is explained in the relevant sections.","title":"API Documentation"},{"location":"developers/api/#overview","text":"","title":"Overview"},{"location":"developers/api/#get-requests","text":"GET requests accept url parameters and returns JSON. Example URL parameter: www.abc.com/page?key1=value1&key2=value2 . A valid token must be provided in the HTTP Authorization header.","title":"GET Requests"},{"location":"developers/api/#post-requests-excluding-file-upload","text":"POST accepts JSON bodies as an input and will return JSON. The HTTP Content-type header must be set to application/json . A valid user token must be provided in the HTTP Authorization header.","title":"POST Requests (Excluding File Upload)"},{"location":"developers/api/#post-request-file-upload-only","text":"POST requests for file uploads must have the HTTP Content-type header set to multipart/form-data A special file upload token must be provided in the HTTP Authorization header. This token is unique to the file being uploaded.","title":"POST Request (File Upload Only)"},{"location":"developers/api/#important-terms-and-nomenclature","text":"Artwork Files : An artwork file is an individual file used in an artwork. Such files include meshes, textures, materials, and other supporting files.. Artworks : An artwork is a collection of one or more artwork files. One artwork may contain many artwork files. Artworks may also have many versions.","title":"Important Terms and Nomenclature."},{"location":"developers/api/#http-response-codes-and-error-handling","text":"Generally, this API does not make use of HTTP response codes. In normal operation, the API will return a HTTP 200 code with a JSON response in the body, regardless of if the request was successful or not. Callers may check if a request was successful using the ok field in the attached JSON. On success the ok field will be set to true . On failure the ok field will be set to false and an error code and message will be included. An example of a successful response: { \"ok\":true ... other JSON data ... } An example of a failed response: { \"ok\":false, \"error\":\"accessDenied\", \"errorMessage\":\"Access to the specified resource is denied.\" }","title":"HTTP Response Codes and Error Handling"},{"location":"developers/api/#tokens-and-the-authorization-header","text":"There are two types of tokens. To maintain security the tokens must be kept secret. Tokens are included plaintext in the authorization header using the bearer schema, ex: Authorization: Bearer <token> . User tokens. User tokens are issued to users when they log in and are used for most API features. The token uniquely identifies the user. File upload tokens . File upload tokens are issued when uploading a file. When a request is made using a file upload token the token is consumed and another must be generated. See artworkFile/create and artworkFile/upload for more information.","title":"Tokens and The Authorization Header"},{"location":"developers/api/#file-uploads","text":"The image below gives an overview of the sequence to upload files to Poly Portal.","title":"File Uploads"},{"location":"developers/api/#endpoints","text":"Type Endpoint Description GET artwork/list Get a list of artworks matching search parameters in a specified order. POST artwork/create Create a new artwork. POST artwork/update Create a new version of the artwork. POST artwork/remove Remove an artwork. POST artworkFile/create Inform the server of your intention to upload a artwork file. POST artworkFile/upload Upload a artwork file using the details from artworkFile/create . POST artworkFile/remove Delete a artwork file.","title":"Endpoints"},{"location":"developers/api/artwork/create/","text":"POST artwork/create Description and Usage Creates an artwork, linking files to it and giving them a joint title and description. Will return the ID of the new artwork upon success. Arguments must be sent in the message body as valid JSON. Key information Type Value Method POST Token User token HTTP content type application/json Required Arguments title Specifies the title of the artwork. Example: { \"title\":\"Fly Me to the Moon\" } Allowed values: any string. files Specifies the artwork files included in this artwork. The user making the request must have permission to use the files. The purpose of the file must also be specified, it may be a model, texture, material, thumbnail or 'other' file. At least one model must be specified. Other fields ( textures , materials , thumbnails , and other ) may be omitted. Example 1: { \"files\":{ \"models\":[ \"c7cf0b3ec6b78d30329ea4bf65f56121b0cf8f05f1b68a3d259b7cd00e113243\" ], \"textures\":[ \"2f33b1f6e25d5d0ded190b8a70ae253c6112c834b3b45640236452b57811b4e7\", \"eca0f1c7112438a1bd2f6ccdb433e8138662d6b406425dd48228ef25c14c0a12\" ], \"materials\":[ \"eca0f1c7112438a1bd2f6ccdb433e8138662d6b406425dd48228ef25c14c0a12\" ], \"thumbnails\":[ \"1f33b7baff0ec4b46a508deb9db1c6f5844de78205935b54d7bb7e45ec1ac30c\" ], \"other\":[ \"7112026d192c74cf7fb325dd5f0ad1d603d0689faebee84fd6a6babf0a3b6f7f\" ] } } Example 2: { \"files\":{ \"models\":[ \"c7cf0b3ec6b78d30329ea4bf65f56121b0cf8f05f1b68a3d259b7cd00e113243\" ] } } Allowed values: A list of valid file references that are not used in other artworks and are the user has permission to use. Additional restrictions may be placed on what files may be used for a specific purpose. For example, a JPEG is not a model. Optional Arguments None. description Specifies the description of the artwork. The default description is \"\" (empty string). Example: { \"description\":\"I worked really hard on this !11!!1!\" } Allowed values: any string. tags Specifies the tags for the artwork. The default is to have no tags. Example: { \"tags\":[ \"wildlife\", \"animals\", \"nature\" ] } Allowed values: A list of strings. Example Responses On Success Request: POST artwork/create Request Body: { \"title\":\"WALL-E\", \"description\":\"EVAAAAAA!\", \"files\":{ \"models\":[ \"3366fd48dc0860585d8c11e7262168b54649d3bb1d3f62c2b6e79597a21ca9d2\" ] }, \"tags\":[ \"robot\", \"movies\" ] } Result: { \"ok\":true, \"artworkID\":5475 } On Error Request: POST artwork/create Request Body: { \"title\":\"The textures field contains duplicates.\", \"description\":\"It will result in an error.\", \"files\":{ \"models\":[ \"a5cfb7e8c5cc4a07081885f06de2606c0bd3de8db8ebf49b32681679195e82bc\" ], \"textures\":[ \"fd168422daf7f4017039ac8c60e5cab64bc3707134d554689f2eec2a7dfa1795\", \"fd168422daf7f4017039ac8c60e5cab64bc3707134d554689f2eec2a7dfa1795\" ] } } Result: { \"ok\":false, \"error\":\"duplicateFile\", \"errorMessage\":\"A file was included in the artwork more than once.\" } Errors The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. invalidContentType The HTTP content type header was set incorrectly. It must be application/JSON . invalidArgument One or more of the arguments had an invalid or illegal value. unknownArgument One or more arguments were unknown. missingRequiredArgument One or more of the required arguments was missing. badJSON The JSON provided could not be parsed. noSuchFile There was no file matching the reference or the user does not have permission to access that file. duplicateFile A file was included in the artwork more than once. unsuitableFile A file was specified for an unsuitable purpose (e.g. an image used as a model).","title":"`POST` artwork/create"},{"location":"developers/api/artwork/create/#post-artworkcreate","text":"","title":"POST artwork/create"},{"location":"developers/api/artwork/create/#description-and-usage","text":"Creates an artwork, linking files to it and giving them a joint title and description. Will return the ID of the new artwork upon success. Arguments must be sent in the message body as valid JSON.","title":"Description and Usage"},{"location":"developers/api/artwork/create/#key-information","text":"Type Value Method POST Token User token HTTP content type application/json","title":"Key information"},{"location":"developers/api/artwork/create/#required-arguments","text":"","title":"Required Arguments"},{"location":"developers/api/artwork/create/#title","text":"Specifies the title of the artwork. Example: { \"title\":\"Fly Me to the Moon\" } Allowed values: any string.","title":"title"},{"location":"developers/api/artwork/create/#files","text":"Specifies the artwork files included in this artwork. The user making the request must have permission to use the files. The purpose of the file must also be specified, it may be a model, texture, material, thumbnail or 'other' file. At least one model must be specified. Other fields ( textures , materials , thumbnails , and other ) may be omitted. Example 1: { \"files\":{ \"models\":[ \"c7cf0b3ec6b78d30329ea4bf65f56121b0cf8f05f1b68a3d259b7cd00e113243\" ], \"textures\":[ \"2f33b1f6e25d5d0ded190b8a70ae253c6112c834b3b45640236452b57811b4e7\", \"eca0f1c7112438a1bd2f6ccdb433e8138662d6b406425dd48228ef25c14c0a12\" ], \"materials\":[ \"eca0f1c7112438a1bd2f6ccdb433e8138662d6b406425dd48228ef25c14c0a12\" ], \"thumbnails\":[ \"1f33b7baff0ec4b46a508deb9db1c6f5844de78205935b54d7bb7e45ec1ac30c\" ], \"other\":[ \"7112026d192c74cf7fb325dd5f0ad1d603d0689faebee84fd6a6babf0a3b6f7f\" ] } } Example 2: { \"files\":{ \"models\":[ \"c7cf0b3ec6b78d30329ea4bf65f56121b0cf8f05f1b68a3d259b7cd00e113243\" ] } } Allowed values: A list of valid file references that are not used in other artworks and are the user has permission to use. Additional restrictions may be placed on what files may be used for a specific purpose. For example, a JPEG is not a model.","title":"files"},{"location":"developers/api/artwork/create/#optional-arguments","text":"None.","title":"Optional Arguments"},{"location":"developers/api/artwork/create/#description","text":"Specifies the description of the artwork. The default description is \"\" (empty string). Example: { \"description\":\"I worked really hard on this !11!!1!\" } Allowed values: any string.","title":"description"},{"location":"developers/api/artwork/create/#tags","text":"Specifies the tags for the artwork. The default is to have no tags. Example: { \"tags\":[ \"wildlife\", \"animals\", \"nature\" ] } Allowed values: A list of strings.","title":"tags"},{"location":"developers/api/artwork/create/#example-responses","text":"","title":"Example Responses"},{"location":"developers/api/artwork/create/#on-success","text":"Request: POST artwork/create Request Body: { \"title\":\"WALL-E\", \"description\":\"EVAAAAAA!\", \"files\":{ \"models\":[ \"3366fd48dc0860585d8c11e7262168b54649d3bb1d3f62c2b6e79597a21ca9d2\" ] }, \"tags\":[ \"robot\", \"movies\" ] } Result: { \"ok\":true, \"artworkID\":5475 }","title":"On Success"},{"location":"developers/api/artwork/create/#on-error","text":"Request: POST artwork/create Request Body: { \"title\":\"The textures field contains duplicates.\", \"description\":\"It will result in an error.\", \"files\":{ \"models\":[ \"a5cfb7e8c5cc4a07081885f06de2606c0bd3de8db8ebf49b32681679195e82bc\" ], \"textures\":[ \"fd168422daf7f4017039ac8c60e5cab64bc3707134d554689f2eec2a7dfa1795\", \"fd168422daf7f4017039ac8c60e5cab64bc3707134d554689f2eec2a7dfa1795\" ] } } Result: { \"ok\":false, \"error\":\"duplicateFile\", \"errorMessage\":\"A file was included in the artwork more than once.\" }","title":"On Error"},{"location":"developers/api/artwork/create/#errors","text":"The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. invalidContentType The HTTP content type header was set incorrectly. It must be application/JSON . invalidArgument One or more of the arguments had an invalid or illegal value. unknownArgument One or more arguments were unknown. missingRequiredArgument One or more of the required arguments was missing. badJSON The JSON provided could not be parsed. noSuchFile There was no file matching the reference or the user does not have permission to access that file. duplicateFile A file was included in the artwork more than once. unsuitableFile A file was specified for an unsuitable purpose (e.g. an image used as a model).","title":"Errors"},{"location":"developers/api/artwork/list/","text":"GET artwork/list Description and Usage Returns a paginated list of artworks in a specified sort order. The list can be additionally filtered using optional search parameters. Arguments must be passed as URL parameters. Key information Type Value Method GET Token User token HTTP content type N/A Required Arguments None. Optional Arguments sortOrder Specifies the order that artworks should be returned in, such as in order of creation. Default = downloads . Example: artwork/list?sortOrder=downloads Allowed values: downloads : sort in order of downloads. views : sort in order of views. lexicographical : sort in lexicographical (alphabetical) order. uploadDate : sort by most recently uploaded. sortDescending Specifies if the sort order should be descending ( true ) or ascending ( false ). Default = true . Example: artwork/list?sortDescending=false Allowed values: true or false pageSize How many results should be returned on a page. Default is 25. Example: artwork/list?pageSize=50 Allowed values: Positive integers 1 <= x <= 100. page Which page to return, relating to pagination. Pages start at 1. Default is 1. Example: artwork/list?page=2 Allowed values: Positive integers 1 or greater. fileExtension Only artworks with the specified file extension will be returned. The file extension should not have a dot (.) at the front. Example: artwork/list?fileExtension=fbx Allowed values: A file extension without a preceding dot. title Only artworks with a title matching the query string will be returned. The search is case-insensitive. Example: artwork/list?title=Zebra Allowed values: Any non empty string uploadedBefore Only artworks uploaded before the specified timestamp will be returned. Example: artwork/list?uploadedBefore=1694085155 Allowed values: UNIX timestamp in integer seconds. uploadedAfter Only artworks uploaded after the specified timestamp will be returned. Example: artwork/list?uploadedAfter=1694085155 Allowed values: UNIX timestamp in integer seconds. createdBefore Only artworks with files created before the specified ISO 8601 date-time will be returned. This argument is timezone unaware, timezone information will be silently discarded. Example: artwork/list?createdBefore=2023\u201009\u201007 Allowed values: An ISO 8601 date-time. createdAfter Only artworks with files created after the specified ISO 8601 date-time will be returned. This argument is timezone unaware, timezone information will be silently discarded. Example: artwork/list?createdAfter=2023\u201009\u201007 Allowed values: An ISO 8601 date-time. tags Specifies the tags that should be matched. See the tagMatchingStrategy parameter to select if results must match either all of the tags or just one or more (defaults to any). Example (specifies \"animals\", \"cars\", and \"music\"): artwork/list?tags=animals&tags=cars&tags=music Allowed values: One or more none empty strings. tagMatchingStrategy Specifies the matching criteria for tags. If this parameter is used you must also specify the tags parameter. all : Will only return artworks that have all of the tags specified any : Will only return artworks that have at least one of the tags specified. Default = any . Example: artwork/list?tagMatchingStrategy=all Allowed values: any or all . Example Responses On Success Query: artwork/list?pageSize=3&page=2&sortOrder=lexicographical Result: { \"ok\":true, \"pageSize\":3, \"page\":2, \"lastPage\":78, \"artworks\":[ { \"id\":634, \"title\":\"Aardvark\", \"downloads\":4952, \"views\":73645, \"files\":{ \"models\":[ { \"sha256\":\"c7cf0b3ec6b78d30329ea4bf65f56121b0cf8f05f1b68a3d259b7cd00e113243\", \"filename\":\"Aardvark\", \"extension\":\"obj\" } ], \"textures\":[ { \"sha256\":\"2f33b1f6e25d5d0ded190b8a70ae253c6112c834b3b45640236452b57811b4e7\", \"filename\":\"tex\", \"extension\":\"png\" }, { \"sha256\":\"eca0f1c7112438a1bd2f6ccdb433e8138662d6b406425dd48228ef25c14c0a12\", \"filename\":\"shadows\", \"extension\":\"png\" } ], \"materials\":[ { \"sha256\":\"d3b6c52687d9bfa360b0b60ab1ced83072afa07e2705ebd6d7be478837e0d351\", \"filename\":\"mats\", \"extension\":\"mtl\" } ], \"thumbnails\":[ { \"sha256\":\"1f33b7baff0ec4b46a508deb9db1c6f5844de78205935b54d7bb7e45ec1ac30c\", \"filename\":\"1024x1024\", \"extension\":\"jpg\" } ], \"other\":[ { \"sha256\":\"7112026d192c74cf7fb325dd5f0ad1d603d0689faebee84fd6a6babf0a3b6f7f\", \"filename\":\"readme\", \"extension\":\"txt\" } ] }, \"tags\":[ \"Animal\", \"Land animal\" ] }, { \"id\":126, \"title\":\"Beaver\", \"downloads\":52, \"views\":645, \"files\":{ \"models\":[ { \"sha256\":\"dde91fcdf38dc7e38739c99c1a873ed3979327d49d2f0e45e09a81417b4a3806\", \"extension\":\"fbx\" } ], \"textures\":[], \"materials\":[], \"thumbnails\":[], \"other\":[] }, \"tags\":[ \"tags aren't always useful\" ] }, { \"id\":85765, \"title\":\"Camel\", \"downloads\":52221, \"views\":64345, \"files\":{ \"models\":[ { \"sha256\":\"e7070285bc228a6efc71835794f0f80b1181c2d8e30d48fe8ec733c7e2ee509e\", \"extension\":\"fbx\" } ], \"textures\":[], \"materials\":[], \"thumbnails\":[], \"other\":[] }, \"tags\":[] } ] } There is no guarantee that the number of artworks returned will be equal to the page size. Successful queries will always return at least one artwork. The order of files is guaranteed to be the same across requests. On Error Query: artwork/list?sortOrder=WRONG Result: { \"ok\":false, \"error\":\"invalidParameterValue\", \"errorMessage\":\"Parameter 'sortOrder' had an invalid value.\" } Errors The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. noArtworksFound No artworks were found that matched the query. pageLimitExceeded The page specified is greater than the total amount of pages at the given page size. invalidArgument One or more of the arguments had an invalid or illegal value. unknownArgument One or more arguments were unknown. missingRequiredArgument One or more of the required arguments was missing.","title":"`GET` artwork/list"},{"location":"developers/api/artwork/list/#get-artworklist","text":"","title":"GET artwork/list"},{"location":"developers/api/artwork/list/#description-and-usage","text":"Returns a paginated list of artworks in a specified sort order. The list can be additionally filtered using optional search parameters. Arguments must be passed as URL parameters.","title":"Description and Usage"},{"location":"developers/api/artwork/list/#key-information","text":"Type Value Method GET Token User token HTTP content type N/A","title":"Key information"},{"location":"developers/api/artwork/list/#required-arguments","text":"None.","title":"Required Arguments"},{"location":"developers/api/artwork/list/#optional-arguments","text":"","title":"Optional Arguments"},{"location":"developers/api/artwork/list/#sortorder","text":"Specifies the order that artworks should be returned in, such as in order of creation. Default = downloads . Example: artwork/list?sortOrder=downloads Allowed values: downloads : sort in order of downloads. views : sort in order of views. lexicographical : sort in lexicographical (alphabetical) order. uploadDate : sort by most recently uploaded.","title":"sortOrder"},{"location":"developers/api/artwork/list/#sortdescending","text":"Specifies if the sort order should be descending ( true ) or ascending ( false ). Default = true . Example: artwork/list?sortDescending=false Allowed values: true or false","title":"sortDescending"},{"location":"developers/api/artwork/list/#pagesize","text":"How many results should be returned on a page. Default is 25. Example: artwork/list?pageSize=50 Allowed values: Positive integers 1 <= x <= 100.","title":"pageSize"},{"location":"developers/api/artwork/list/#page","text":"Which page to return, relating to pagination. Pages start at 1. Default is 1. Example: artwork/list?page=2 Allowed values: Positive integers 1 or greater.","title":"page"},{"location":"developers/api/artwork/list/#fileextension","text":"Only artworks with the specified file extension will be returned. The file extension should not have a dot (.) at the front. Example: artwork/list?fileExtension=fbx Allowed values: A file extension without a preceding dot.","title":"fileExtension"},{"location":"developers/api/artwork/list/#title","text":"Only artworks with a title matching the query string will be returned. The search is case-insensitive. Example: artwork/list?title=Zebra Allowed values: Any non empty string","title":"title"},{"location":"developers/api/artwork/list/#uploadedbefore","text":"Only artworks uploaded before the specified timestamp will be returned. Example: artwork/list?uploadedBefore=1694085155 Allowed values: UNIX timestamp in integer seconds.","title":"uploadedBefore"},{"location":"developers/api/artwork/list/#uploadedafter","text":"Only artworks uploaded after the specified timestamp will be returned. Example: artwork/list?uploadedAfter=1694085155 Allowed values: UNIX timestamp in integer seconds.","title":"uploadedAfter"},{"location":"developers/api/artwork/list/#createdbefore","text":"Only artworks with files created before the specified ISO 8601 date-time will be returned. This argument is timezone unaware, timezone information will be silently discarded. Example: artwork/list?createdBefore=2023\u201009\u201007 Allowed values: An ISO 8601 date-time.","title":"createdBefore"},{"location":"developers/api/artwork/list/#createdafter","text":"Only artworks with files created after the specified ISO 8601 date-time will be returned. This argument is timezone unaware, timezone information will be silently discarded. Example: artwork/list?createdAfter=2023\u201009\u201007 Allowed values: An ISO 8601 date-time.","title":"createdAfter"},{"location":"developers/api/artwork/list/#tags","text":"Specifies the tags that should be matched. See the tagMatchingStrategy parameter to select if results must match either all of the tags or just one or more (defaults to any). Example (specifies \"animals\", \"cars\", and \"music\"): artwork/list?tags=animals&tags=cars&tags=music Allowed values: One or more none empty strings.","title":"tags"},{"location":"developers/api/artwork/list/#tagmatchingstrategy","text":"Specifies the matching criteria for tags. If this parameter is used you must also specify the tags parameter. all : Will only return artworks that have all of the tags specified any : Will only return artworks that have at least one of the tags specified. Default = any . Example: artwork/list?tagMatchingStrategy=all Allowed values: any or all .","title":"tagMatchingStrategy"},{"location":"developers/api/artwork/list/#example-responses","text":"","title":"Example Responses"},{"location":"developers/api/artwork/list/#on-success","text":"Query: artwork/list?pageSize=3&page=2&sortOrder=lexicographical Result: { \"ok\":true, \"pageSize\":3, \"page\":2, \"lastPage\":78, \"artworks\":[ { \"id\":634, \"title\":\"Aardvark\", \"downloads\":4952, \"views\":73645, \"files\":{ \"models\":[ { \"sha256\":\"c7cf0b3ec6b78d30329ea4bf65f56121b0cf8f05f1b68a3d259b7cd00e113243\", \"filename\":\"Aardvark\", \"extension\":\"obj\" } ], \"textures\":[ { \"sha256\":\"2f33b1f6e25d5d0ded190b8a70ae253c6112c834b3b45640236452b57811b4e7\", \"filename\":\"tex\", \"extension\":\"png\" }, { \"sha256\":\"eca0f1c7112438a1bd2f6ccdb433e8138662d6b406425dd48228ef25c14c0a12\", \"filename\":\"shadows\", \"extension\":\"png\" } ], \"materials\":[ { \"sha256\":\"d3b6c52687d9bfa360b0b60ab1ced83072afa07e2705ebd6d7be478837e0d351\", \"filename\":\"mats\", \"extension\":\"mtl\" } ], \"thumbnails\":[ { \"sha256\":\"1f33b7baff0ec4b46a508deb9db1c6f5844de78205935b54d7bb7e45ec1ac30c\", \"filename\":\"1024x1024\", \"extension\":\"jpg\" } ], \"other\":[ { \"sha256\":\"7112026d192c74cf7fb325dd5f0ad1d603d0689faebee84fd6a6babf0a3b6f7f\", \"filename\":\"readme\", \"extension\":\"txt\" } ] }, \"tags\":[ \"Animal\", \"Land animal\" ] }, { \"id\":126, \"title\":\"Beaver\", \"downloads\":52, \"views\":645, \"files\":{ \"models\":[ { \"sha256\":\"dde91fcdf38dc7e38739c99c1a873ed3979327d49d2f0e45e09a81417b4a3806\", \"extension\":\"fbx\" } ], \"textures\":[], \"materials\":[], \"thumbnails\":[], \"other\":[] }, \"tags\":[ \"tags aren't always useful\" ] }, { \"id\":85765, \"title\":\"Camel\", \"downloads\":52221, \"views\":64345, \"files\":{ \"models\":[ { \"sha256\":\"e7070285bc228a6efc71835794f0f80b1181c2d8e30d48fe8ec733c7e2ee509e\", \"extension\":\"fbx\" } ], \"textures\":[], \"materials\":[], \"thumbnails\":[], \"other\":[] }, \"tags\":[] } ] } There is no guarantee that the number of artworks returned will be equal to the page size. Successful queries will always return at least one artwork. The order of files is guaranteed to be the same across requests.","title":"On Success"},{"location":"developers/api/artwork/list/#on-error","text":"Query: artwork/list?sortOrder=WRONG Result: { \"ok\":false, \"error\":\"invalidParameterValue\", \"errorMessage\":\"Parameter 'sortOrder' had an invalid value.\" }","title":"On Error"},{"location":"developers/api/artwork/list/#errors","text":"The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. noArtworksFound No artworks were found that matched the query. pageLimitExceeded The page specified is greater than the total amount of pages at the given page size. invalidArgument One or more of the arguments had an invalid or illegal value. unknownArgument One or more arguments were unknown. missingRequiredArgument One or more of the required arguments was missing.","title":"Errors"},{"location":"developers/api/artwork/remove/","text":"POST artwork/remove Description and Usage Remove an artwork, preventing access to it. The artwork will still be preserved on disk. Optionally removes associated files (the default behavior is to remove). On success, a list of orphaned files will be returned (if no files were orphaned, such as if they were all removed, an empty list is returned). Arguments must be sent in the message body as valid JSON. Key information Type Value Method POST Token User token HTTP content type application/json Required Arguments file The artwork to be removed. The user must have permissions over the artwork. Example: { \"artworkID\":9785 } Allowed values: An artwork ID. Optional Arguments removeFiles If the files associated with the artwork should also be removed. The function is equivalent to artworkFile/remove Default = true . Example: { \"removeFiles\":false } Allowed values: true or false . Example Responses On Success Request: POST artwork/remove Request Body: { \"artworkID\":9785, \"removeartworkFiles\":false } Result: { \"ok\":true, \"orphanedFiles\":[ { \"sha256\":\"5e77061a9b955ac03d9a574a8a68d8a58005949fa4fdd3d9e38dbd263028ffe8\", \"extension\":\"obj\" } ] } On Error Request: POST artwork/remove Request Body: { \"artworkID\":\"should be an integer\", } Result: { \"ok\":false, \"error\":\"invalidArgument\", \"errorMessage\":\"Parameter 'artworkID' had an invalid value\" } git Errors The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. invalidContentType The HTTP content type header was set incorrectly. It must be application/JSON . invalidArgument One or more of the arguments had an invalid or illegal value. unknownArgument One or more arguments were unknown. missingRequiredArgument One or more of the required arguments was missing. badJSON The JSON provided could not be parsed. noSuchArtwork There was no artwork matching the reference or the user does not have permission to access that artwork.","title":"`POST` artwork/remove"},{"location":"developers/api/artwork/remove/#post-artworkremove","text":"","title":"POST artwork/remove"},{"location":"developers/api/artwork/remove/#description-and-usage","text":"Remove an artwork, preventing access to it. The artwork will still be preserved on disk. Optionally removes associated files (the default behavior is to remove). On success, a list of orphaned files will be returned (if no files were orphaned, such as if they were all removed, an empty list is returned). Arguments must be sent in the message body as valid JSON.","title":"Description and Usage"},{"location":"developers/api/artwork/remove/#key-information","text":"Type Value Method POST Token User token HTTP content type application/json","title":"Key information"},{"location":"developers/api/artwork/remove/#required-arguments","text":"","title":"Required Arguments"},{"location":"developers/api/artwork/remove/#file","text":"The artwork to be removed. The user must have permissions over the artwork. Example: { \"artworkID\":9785 } Allowed values: An artwork ID.","title":"file"},{"location":"developers/api/artwork/remove/#optional-arguments","text":"","title":"Optional Arguments"},{"location":"developers/api/artwork/remove/#removefiles","text":"If the files associated with the artwork should also be removed. The function is equivalent to artworkFile/remove Default = true . Example: { \"removeFiles\":false } Allowed values: true or false .","title":"removeFiles"},{"location":"developers/api/artwork/remove/#example-responses","text":"","title":"Example Responses"},{"location":"developers/api/artwork/remove/#on-success","text":"Request: POST artwork/remove Request Body: { \"artworkID\":9785, \"removeartworkFiles\":false } Result: { \"ok\":true, \"orphanedFiles\":[ { \"sha256\":\"5e77061a9b955ac03d9a574a8a68d8a58005949fa4fdd3d9e38dbd263028ffe8\", \"extension\":\"obj\" } ] }","title":"On Success"},{"location":"developers/api/artwork/remove/#on-error","text":"Request: POST artwork/remove Request Body: { \"artworkID\":\"should be an integer\", } Result: { \"ok\":false, \"error\":\"invalidArgument\", \"errorMessage\":\"Parameter 'artworkID' had an invalid value\" } git","title":"On Error"},{"location":"developers/api/artwork/remove/#errors","text":"The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. invalidContentType The HTTP content type header was set incorrectly. It must be application/JSON . invalidArgument One or more of the arguments had an invalid or illegal value. unknownArgument One or more arguments were unknown. missingRequiredArgument One or more of the required arguments was missing. badJSON The JSON provided could not be parsed. noSuchArtwork There was no artwork matching the reference or the user does not have permission to access that artwork.","title":"Errors"},{"location":"developers/api/artwork/update/","text":"POST artwork/update Description and Usage May be used to change the title of an artwork, modify the description, and/or update what files are associated with the artwork. At least one of the optional arguments must be specified. Arguments must be sent in the message body as valid JSON. Key information Type Value Method POST Token User token HTTP content type application/json Required Arguments artworkID The ID of the artwork to be updated. The user must have permissions over the artwork specified. Example: { \"artworkID\":4672 } Allowed values: An artwork ID. Optional Arguments (include at least one) title Specifies the title of the artwork. Example: { \"title\":\"Hyper-Realistic Schweppes Lemonade Can\" } Allowed values: any string. files Specifies the files included in this artwork. The files may already be included in the artwork or they may be files not included in any artwork. The user must have permission to use the files. The updated list of files must not be identical to the current list of files - if the files are not being updated do not use this argument. The behavior is the same as the 'files' argument for the artwork/create endpoint. Example: { \"files\":{ \"models\":[ \"c7cf0b3ec6b78d30329ea4bf65f56121b0cf8f05f1b68a3d259b7cd00e113243\" ], \"textures\":[ \"2f33b1f6e25d5d0ded190b8a70ae253c6112c834b3b45640236452b57811b4e7\", \"eca0f1c7112438a1bd2f6ccdb433e8138662d6b406425dd48228ef25c14c0a12\" ], \"materials\":[ \"eca0f1c7112438a1bd2f6ccdb433e8138662d6b406425dd48228ef25c14c0a12\" ], \"thumbnails\":[ \"1f33b7baff0ec4b46a508deb9db1c6f5844de78205935b54d7bb7e45ec1ac30c\" ], \"other\":[ \"7112026d192c74cf7fb325dd5f0ad1d603d0689faebee84fd6a6babf0a3b6f7f\" ] } } Allowed values: A list of valid file references that are not used in other artworks and are the user has permission to use. Additional restrictions may be placed on what files may be used for a specific purpose. For example, a JPEG is not a model. description Specifies the description of the artwork. Example: { \"description\":\"Writing descriptions is hard.\" } Allowed values: any string. tags Specifies the tags for the artwork. If this parameter is not specified than the tags will not be changed. Using this argument will remove any tags that do not appear in the list. Example: { \"tags\":[ \"wildlife\", \"animals\", \"nature\" ] } Allowed values: A list of strings. Example Responses On Success Request: POST artwork/create Request Body: { \"artworkID\":12477, \"title\":\"This is the updated title\", \"description\":\"This is the new description\", \"tags\":[ \"updated tags\", \"old ones not in this list will be removed\" ] } Result: { \"ok\":true } On Error Request: POST artwork/create Request Body: { \"artworkID\":12477, \"files\":[] } Result: { \"ok\":false, \"error\":\"noFilesSpecified\", \"errorMessage\":\"An artwork must specify at least one model file.\" } Errors The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. invalidContentType The HTTP content type header was set incorrectly. It must be application/JSON . invalidArgument One or more of the arguments had an invalid or illegal value. unknownArgument One or more arguments were unknown. missingRequiredArgument One or more of the required arguments was missing. badJSON The JSON provided could not be parsed. noSuchFile There was no file matching the reference or the user does not have permission to access that file. duplicateFile A file was included in the artwork more than once. noFilesSpecified An artwork must specify at least one file. noFilesChanged The updated list of files is the same as the current list of files. noSuchArtwork There was no artwork matching the reference or the user does not have permission to access that artwork. unsuitableFile A file was specified for an unsuitable purpose (e.g. an image used as a model).","title":"`POST` artwork/update"},{"location":"developers/api/artwork/update/#post-artworkupdate","text":"","title":"POST artwork/update"},{"location":"developers/api/artwork/update/#description-and-usage","text":"May be used to change the title of an artwork, modify the description, and/or update what files are associated with the artwork. At least one of the optional arguments must be specified. Arguments must be sent in the message body as valid JSON.","title":"Description and Usage"},{"location":"developers/api/artwork/update/#key-information","text":"Type Value Method POST Token User token HTTP content type application/json","title":"Key information"},{"location":"developers/api/artwork/update/#required-arguments","text":"","title":"Required Arguments"},{"location":"developers/api/artwork/update/#artworkid","text":"The ID of the artwork to be updated. The user must have permissions over the artwork specified. Example: { \"artworkID\":4672 } Allowed values: An artwork ID.","title":"artworkID"},{"location":"developers/api/artwork/update/#optional-arguments-include-at-least-one","text":"","title":"Optional Arguments (include at least one)"},{"location":"developers/api/artwork/update/#title","text":"Specifies the title of the artwork. Example: { \"title\":\"Hyper-Realistic Schweppes Lemonade Can\" } Allowed values: any string.","title":"title"},{"location":"developers/api/artwork/update/#files","text":"Specifies the files included in this artwork. The files may already be included in the artwork or they may be files not included in any artwork. The user must have permission to use the files. The updated list of files must not be identical to the current list of files - if the files are not being updated do not use this argument. The behavior is the same as the 'files' argument for the artwork/create endpoint. Example: { \"files\":{ \"models\":[ \"c7cf0b3ec6b78d30329ea4bf65f56121b0cf8f05f1b68a3d259b7cd00e113243\" ], \"textures\":[ \"2f33b1f6e25d5d0ded190b8a70ae253c6112c834b3b45640236452b57811b4e7\", \"eca0f1c7112438a1bd2f6ccdb433e8138662d6b406425dd48228ef25c14c0a12\" ], \"materials\":[ \"eca0f1c7112438a1bd2f6ccdb433e8138662d6b406425dd48228ef25c14c0a12\" ], \"thumbnails\":[ \"1f33b7baff0ec4b46a508deb9db1c6f5844de78205935b54d7bb7e45ec1ac30c\" ], \"other\":[ \"7112026d192c74cf7fb325dd5f0ad1d603d0689faebee84fd6a6babf0a3b6f7f\" ] } } Allowed values: A list of valid file references that are not used in other artworks and are the user has permission to use. Additional restrictions may be placed on what files may be used for a specific purpose. For example, a JPEG is not a model.","title":"files"},{"location":"developers/api/artwork/update/#description","text":"Specifies the description of the artwork. Example: { \"description\":\"Writing descriptions is hard.\" } Allowed values: any string.","title":"description"},{"location":"developers/api/artwork/update/#tags","text":"Specifies the tags for the artwork. If this parameter is not specified than the tags will not be changed. Using this argument will remove any tags that do not appear in the list. Example: { \"tags\":[ \"wildlife\", \"animals\", \"nature\" ] } Allowed values: A list of strings.","title":"tags"},{"location":"developers/api/artwork/update/#example-responses","text":"","title":"Example Responses"},{"location":"developers/api/artwork/update/#on-success","text":"Request: POST artwork/create Request Body: { \"artworkID\":12477, \"title\":\"This is the updated title\", \"description\":\"This is the new description\", \"tags\":[ \"updated tags\", \"old ones not in this list will be removed\" ] } Result: { \"ok\":true }","title":"On Success"},{"location":"developers/api/artwork/update/#on-error","text":"Request: POST artwork/create Request Body: { \"artworkID\":12477, \"files\":[] } Result: { \"ok\":false, \"error\":\"noFilesSpecified\", \"errorMessage\":\"An artwork must specify at least one model file.\" }","title":"On Error"},{"location":"developers/api/artwork/update/#errors","text":"The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. invalidContentType The HTTP content type header was set incorrectly. It must be application/JSON . invalidArgument One or more of the arguments had an invalid or illegal value. unknownArgument One or more arguments were unknown. missingRequiredArgument One or more of the required arguments was missing. badJSON The JSON provided could not be parsed. noSuchFile There was no file matching the reference or the user does not have permission to access that file. duplicateFile A file was included in the artwork more than once. noFilesSpecified An artwork must specify at least one file. noFilesChanged The updated list of files is the same as the current list of files. noSuchArtwork There was no artwork matching the reference or the user does not have permission to access that artwork. unsuitableFile A file was specified for an unsuitable purpose (e.g. an image used as a model).","title":"Errors"},{"location":"developers/api/artworkFile/create/","text":"POST artworkFile/create Description and Usage This endpoint is used with its companion endpoint artworkFile/upload to upload files to the server. This method informs the server of your intention to upload a file and provides a one time use 'file upload token' that is required by artworkFile/upload . The file upload token is a JSON Web Token from which the expiry time can be determined. An approximation of seconds until expiry is included in the response. Arguments must be sent in the message body as valid JSON. Key information Type Value Method POST Token User token HTTP content type application/json Required Arguments fileExtension The file extension of the file that will be uploaded. The file extension should not have a dot (.) at the front. Example: { \"fileExtension\":\"fbx\" } Allowed values: The file extension (without a preceding dot) of a file to uploaded. Specifying the wrong extension is likely to cause 3DFile/upload to fail. Any string is accepted. fileName The name of the file that will be uploaded. This is not required to include the dot (.) used for the file extension. Example: { \"fileName\":\"My_c00l_m0del\" } Allowed values: Any string. Optional Arguments None. Example Responses On Success Request: POST 3DFile/create Request Body: { \"fileName\":\"C3PO\", \"fileExtension\":\"fbx\" } Result: { \"ok\":true, \"fileUploadToken\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJleGFtcGxlIiwiaWF0IjoxNzA5ODg2MjgxLCJleHAiOjE3MDk4ODc1OTIsImF1ZCI6Ind3dy5leGFtcGxlLmNvbSIsInN1YiI6InVwbG9hZDo4NDg1ODM3NDc1ODYifQ.ai3a3aRR1fNOZLcZEzQ6KcLDtf9wH7VFXmF5dC79VtM\", \"secondsToExpiry\":1200 } On Error Request: POST 3DFile/create Request Body: { \"unknown\":\"abc123\" } Result: { \"ok\":false, \"error\":\"unknownArgument\", \"errorMessage\":\"Unknown argument was passed. Allowed arguments are: `fileExtension`.\" } Errors The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. invalidContentType The HTTP content type header was set incorrectly. It must be application/JSON . invalidArgument One or more of the arguments had an invalid or illegal value. unknownArgument One or more arguments were unknown. missingRequiredArgument One or more of the required arguments was missing. badJSON The JSON provided could not be parsed.","title":"`POST` artworkFile/create"},{"location":"developers/api/artworkFile/create/#post-artworkfilecreate","text":"","title":"POST artworkFile/create"},{"location":"developers/api/artworkFile/create/#description-and-usage","text":"This endpoint is used with its companion endpoint artworkFile/upload to upload files to the server. This method informs the server of your intention to upload a file and provides a one time use 'file upload token' that is required by artworkFile/upload . The file upload token is a JSON Web Token from which the expiry time can be determined. An approximation of seconds until expiry is included in the response. Arguments must be sent in the message body as valid JSON.","title":"Description and Usage"},{"location":"developers/api/artworkFile/create/#key-information","text":"Type Value Method POST Token User token HTTP content type application/json","title":"Key information"},{"location":"developers/api/artworkFile/create/#required-arguments","text":"","title":"Required Arguments"},{"location":"developers/api/artworkFile/create/#fileextension","text":"The file extension of the file that will be uploaded. The file extension should not have a dot (.) at the front. Example: { \"fileExtension\":\"fbx\" } Allowed values: The file extension (without a preceding dot) of a file to uploaded. Specifying the wrong extension is likely to cause 3DFile/upload to fail. Any string is accepted.","title":"fileExtension"},{"location":"developers/api/artworkFile/create/#filename","text":"The name of the file that will be uploaded. This is not required to include the dot (.) used for the file extension. Example: { \"fileName\":\"My_c00l_m0del\" } Allowed values: Any string.","title":"fileName"},{"location":"developers/api/artworkFile/create/#optional-arguments","text":"None.","title":"Optional Arguments"},{"location":"developers/api/artworkFile/create/#example-responses","text":"","title":"Example Responses"},{"location":"developers/api/artworkFile/create/#on-success","text":"Request: POST 3DFile/create Request Body: { \"fileName\":\"C3PO\", \"fileExtension\":\"fbx\" } Result: { \"ok\":true, \"fileUploadToken\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJleGFtcGxlIiwiaWF0IjoxNzA5ODg2MjgxLCJleHAiOjE3MDk4ODc1OTIsImF1ZCI6Ind3dy5leGFtcGxlLmNvbSIsInN1YiI6InVwbG9hZDo4NDg1ODM3NDc1ODYifQ.ai3a3aRR1fNOZLcZEzQ6KcLDtf9wH7VFXmF5dC79VtM\", \"secondsToExpiry\":1200 }","title":"On Success"},{"location":"developers/api/artworkFile/create/#on-error","text":"Request: POST 3DFile/create Request Body: { \"unknown\":\"abc123\" } Result: { \"ok\":false, \"error\":\"unknownArgument\", \"errorMessage\":\"Unknown argument was passed. Allowed arguments are: `fileExtension`.\" }","title":"On Error"},{"location":"developers/api/artworkFile/create/#errors","text":"The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. invalidContentType The HTTP content type header was set incorrectly. It must be application/JSON . invalidArgument One or more of the arguments had an invalid or illegal value. unknownArgument One or more arguments were unknown. missingRequiredArgument One or more of the required arguments was missing. badJSON The JSON provided could not be parsed.","title":"Errors"},{"location":"developers/api/artworkFile/remove/","text":"POST artworkFile/remove Description and Usage Remove an artwork file, preventing access to it. The file itself will be preserved on disk. The file must not be associated with an artwork. Arguments must be sent in the message body as valid JSON. Key information Type Value Method POST Token User token HTTP content type application/json Required Arguments file The file reference (sha-256) of the file to be deleted. The file may not be in use by an artwork. Example: { \"file\":\"6b34652fb313f2ebbbd086a222a1b7ad60d0add0aea753e451b94230eb4e5a1e\" } Allowed values: A string matching a file reference. Optional Arguments None. Example Responses On Success Request: POST artworkFile/remove Request Body: { \"file\":\"6b34652fb313f2ebbbd086a222a1b7ad60d0add0aea753e451b94230eb4e5a1e\" } Result: { \"ok\":true } On Error Request: POST artworkFile/remove Request Body: { \"file\":\"not_a_valid_file_reference\" } Result: { \"ok\":false, \"error\":\"noSuchFile\", \"errorMessage\":\"There was no file matching the reference or the user does not have permission to access that file.\" } Errors The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. invalidContentType The HTTP content type header was set incorrectly. It must be application/JSON . invalidArgument One or more of the arguments had an invalid or illegal value. unknownArgument One or more arguments were unknown. missingRequiredArgument One or more of the required arguments was missing. badJSON The JSON provided could not be parsed. noSuchFile There was no file matching the reference or the user does not have permission to access that file. fileInUse The file is referenced by an artwork. Remove the artwork first.","title":"`POST` artworkFile/remove"},{"location":"developers/api/artworkFile/remove/#post-artworkfileremove","text":"","title":"POST artworkFile/remove"},{"location":"developers/api/artworkFile/remove/#description-and-usage","text":"Remove an artwork file, preventing access to it. The file itself will be preserved on disk. The file must not be associated with an artwork. Arguments must be sent in the message body as valid JSON.","title":"Description and Usage"},{"location":"developers/api/artworkFile/remove/#key-information","text":"Type Value Method POST Token User token HTTP content type application/json","title":"Key information"},{"location":"developers/api/artworkFile/remove/#required-arguments","text":"","title":"Required Arguments"},{"location":"developers/api/artworkFile/remove/#file","text":"The file reference (sha-256) of the file to be deleted. The file may not be in use by an artwork. Example: { \"file\":\"6b34652fb313f2ebbbd086a222a1b7ad60d0add0aea753e451b94230eb4e5a1e\" } Allowed values: A string matching a file reference.","title":"file"},{"location":"developers/api/artworkFile/remove/#optional-arguments","text":"None.","title":"Optional Arguments"},{"location":"developers/api/artworkFile/remove/#example-responses","text":"","title":"Example Responses"},{"location":"developers/api/artworkFile/remove/#on-success","text":"Request: POST artworkFile/remove Request Body: { \"file\":\"6b34652fb313f2ebbbd086a222a1b7ad60d0add0aea753e451b94230eb4e5a1e\" } Result: { \"ok\":true }","title":"On Success"},{"location":"developers/api/artworkFile/remove/#on-error","text":"Request: POST artworkFile/remove Request Body: { \"file\":\"not_a_valid_file_reference\" } Result: { \"ok\":false, \"error\":\"noSuchFile\", \"errorMessage\":\"There was no file matching the reference or the user does not have permission to access that file.\" }","title":"On Error"},{"location":"developers/api/artworkFile/remove/#errors","text":"The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. invalidContentType The HTTP content type header was set incorrectly. It must be application/JSON . invalidArgument One or more of the arguments had an invalid or illegal value. unknownArgument One or more arguments were unknown. missingRequiredArgument One or more of the required arguments was missing. badJSON The JSON provided could not be parsed. noSuchFile There was no file matching the reference or the user does not have permission to access that file. fileInUse The file is referenced by an artwork. Remove the artwork first.","title":"Errors"},{"location":"developers/api/artworkFile/upload/","text":"POST artworkFile/upload Description and Usage This method uploads a file to the server. A 'file upload token' is required and can be obtained from artworkFile/create . Making the request consumes the token, regardless of if the request was successful or not. A user token is not required for this method. On success the sha-256 hash of the file will be returned which can be used to access the file. Key information Type Value Method POST Token File upload token HTTP content type multipart/form-data Required Arguments None. Ensure you have a file upload token from artworkFile/create . The file is sent in the body as multipart/form-data content. Optional Arguments None. Example Responses On Success Request: POST artworkFile/upload Result: { \"ok\":true, \"file\":{ \"sha256\":\"5e77061a9b955ac03d9a574a8a68d8a58005949fa4fdd3d9e38dbd263028ffe8\", } } On Error Request: POST artworkFile/upload Result: { \"ok\":false, \"error\":\"badFile\", \"errorMessage\":\"The server rejected the file. The file may be corrupted or have an incorrect file extension.\" } Errors The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. invalidContentType The HTTP content type header was set incorrectly. It must be multipart/form-data . badFile The server rejected the file. The file may be corrupted or have an incorrect file extension.","title":"`POST` artworkFile/upload"},{"location":"developers/api/artworkFile/upload/#post-artworkfileupload","text":"","title":"POST artworkFile/upload"},{"location":"developers/api/artworkFile/upload/#description-and-usage","text":"This method uploads a file to the server. A 'file upload token' is required and can be obtained from artworkFile/create . Making the request consumes the token, regardless of if the request was successful or not. A user token is not required for this method. On success the sha-256 hash of the file will be returned which can be used to access the file.","title":"Description and Usage"},{"location":"developers/api/artworkFile/upload/#key-information","text":"Type Value Method POST Token File upload token HTTP content type multipart/form-data","title":"Key information"},{"location":"developers/api/artworkFile/upload/#required-arguments","text":"None. Ensure you have a file upload token from artworkFile/create . The file is sent in the body as multipart/form-data content.","title":"Required Arguments"},{"location":"developers/api/artworkFile/upload/#optional-arguments","text":"None.","title":"Optional Arguments"},{"location":"developers/api/artworkFile/upload/#example-responses","text":"","title":"Example Responses"},{"location":"developers/api/artworkFile/upload/#on-success","text":"Request: POST artworkFile/upload Result: { \"ok\":true, \"file\":{ \"sha256\":\"5e77061a9b955ac03d9a574a8a68d8a58005949fa4fdd3d9e38dbd263028ffe8\", } }","title":"On Success"},{"location":"developers/api/artworkFile/upload/#on-error","text":"Request: POST artworkFile/upload Result: { \"ok\":false, \"error\":\"badFile\", \"errorMessage\":\"The server rejected the file. The file may be corrupted or have an incorrect file extension.\" }","title":"On Error"},{"location":"developers/api/artworkFile/upload/#errors","text":"The following list may not be exhaustive. Callers should always check the ok parameter of the JSON. Error Description accessDenied Access to the specified resource is denied. tokenExpired The token has expired. tokenMissing No token was provided. unavailable The service is temporarily unavailable. internalError The request could not be completed due to an internal error. It is possible some of the request was carried out. invalidContentType The HTTP content type header was set incorrectly. It must be multipart/form-data . badFile The server rejected the file. The file may be corrupted or have an incorrect file extension.","title":"Errors"},{"location":"developers/database/tables/","text":"Database Tables These documents reflect the tables in the design stage and may not be up to date. Use as reference only. DBML The following is a DBML description of the database, Create a diagram at https://dbdiagram.io/ to view it. // Display: https://dbdiagram.io/ // Docs: https://dbml.dbdiagram.io/docs/ Table File { id bigserial [pk] fileExtension text [not null] // Used to select the three.js loader fileName text [not null] ownerUserId text [not null] uploadedAt timestamp } Table Artwork { id bigserial [pk] title text [not null] description text [not null] ownerUserId text [not null] downloadCount integer [not null, default: 0] viewCount integer [not null, default: 0] createdAt timestamp [not null] metaTriangleCount integer metaQuadCount integer metaPolygonCount integer metaTotalTriangleCount integer metaVerticesCount integer metaMaterialsCount integer } Table ArtworkFiles { artworkId bigserial [ref: > Artwork.id] artworkFileId bigserial [ref: > File.id] artworkVersion integer [not null] indexes { (artworkId, artworkFileId) [pk] } } Table ArtworkTags { artworkId bigserial [ref: > Artwork.id, not null] tag text [not null] Indexes { (artworkId, tag) [unique] } } Table ArtworkFileUploadTokens { jti text [pk] fileId bigserial [ref: > File.id, not null] consumed boolean [not null, default: FALSE] }","title":"Database Tables"},{"location":"developers/database/tables/#database-tables","text":"These documents reflect the tables in the design stage and may not be up to date. Use as reference only.","title":"Database Tables"},{"location":"developers/database/tables/#dbml","text":"The following is a DBML description of the database, Create a diagram at https://dbdiagram.io/ to view it. // Display: https://dbdiagram.io/ // Docs: https://dbml.dbdiagram.io/docs/ Table File { id bigserial [pk] fileExtension text [not null] // Used to select the three.js loader fileName text [not null] ownerUserId text [not null] uploadedAt timestamp } Table Artwork { id bigserial [pk] title text [not null] description text [not null] ownerUserId text [not null] downloadCount integer [not null, default: 0] viewCount integer [not null, default: 0] createdAt timestamp [not null] metaTriangleCount integer metaQuadCount integer metaPolygonCount integer metaTotalTriangleCount integer metaVerticesCount integer metaMaterialsCount integer } Table ArtworkFiles { artworkId bigserial [ref: > Artwork.id] artworkFileId bigserial [ref: > File.id] artworkVersion integer [not null] indexes { (artworkId, artworkFileId) [pk] } } Table ArtworkTags { artworkId bigserial [ref: > Artwork.id, not null] tag text [not null] Indexes { (artworkId, tag) [unique] } } Table ArtworkFileUploadTokens { jti text [pk] fileId bigserial [ref: > File.id, not null] consumed boolean [not null, default: FALSE] }","title":"DBML"},{"location":"users/","text":"","title":"Index"}]}